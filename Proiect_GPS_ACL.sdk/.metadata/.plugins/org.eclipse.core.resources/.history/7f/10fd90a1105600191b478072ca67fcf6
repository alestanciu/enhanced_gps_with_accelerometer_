/*
 * Empty C++ Application
 */
#include "acc.h"
#include "wifi.h"
#include "GPS.h"

#include "sleep.h"
#include "string"

#include <pthread.h>

using namespace std;

int GPSLineCounter = 0;

void *SendGPSData(void*)
{

}

void *SendACCData(void*)
{

}

int main()
{

	Init_GPS();
	GPSLineCounter = 0;
	int SecureLines = 0;
	char ptr[255];
	char bff[6];
	char * recv_data = (char*) malloc(sizeof(char*) * 1024);
	char send_data[4096];
	char data[1024];
	int start = 0;
	strcpy(ptr,"");
	strcpy(send_data,"");


	RunWifi();
	InitACL();
			while(state != CONNECTED) { Wifi_Connect(); DEIPcK::periodicTasks(); }
			xil_printf("Connected to wifi!\n");
			while(state != SERVERCONNECTED1) { Wifi_TCPConnect(); DEIPcK::periodicTasks(); }
			xil_printf("Connected to server!\n");
			while(state != SERVERCONNECTED2) { Wifi_TCPConnect2(); DEIPcK::periodicTasks(); }
			xil_printf("Connected to server!\n");
			while(1)
			{
				/*
				recv_data = Wifi_ReadFromServer();
				if(data != NULL)
				{
					xil_printf("Received:%s",data);
				}
				*/

				xil_printf("Sending data...\r\n");
				while(true)
				{
				strcpy(data,RecieveGPSData());
							for(int i=1;i<6;i++) bff[i-1] = data[i];
							bff[5]='\0';
							if(strcmp(bff,"GPGGA") == 0) { start = 1; SecureLines++;}
							if((start == 1) && (SecureLines > 6))
							{
								strcat(ptr,bff);
								strcat(ptr," ");
								//xil_printf("%s\n",data);
								strcat(send_data,data);
								strcat(send_data,"\n");
								if ( GPSLineCounter == 4 )
								{
									//xil_printf("------------------\n");
									//xil_printf("Lines:%s\n",ptr);
									//xil_printf("------------------\n");
									GPSLineCounter = 0;
									start = 0;
									SecureLines = 7;
									if(strcmp(ptr,"GPGGA GPGSA GPGSV GPRMC GPVTG ") == 0) {strcpy(ptr,""); break;}
									else { strcpy(ptr,""); strcpy(send_data,""); }
								}
								else GPSLineCounter++;
							}

				}
				strcat(send_data,GetDataFromACL());
				//xil_printf("%s\n",send_data);
				Wifi_SendServer((char*)send_data);
				strcpy(send_data,"");
				DEIPcK::periodicTasks();
			}



	return 0;
}
