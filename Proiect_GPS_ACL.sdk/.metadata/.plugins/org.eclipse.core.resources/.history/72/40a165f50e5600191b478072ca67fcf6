#include "PmodWIFI.h"
#include "xil_cache.h"
#include <string.h>
#include "string"

using namespace std;

#ifdef __MICROBLAZE__
#define PMODWIFI_VEC_ID XPAR_INTC_0_PMODWIFI_0_VEC_ID
#else
#define PMODWIFI_VEC_ID XPAR_FABRIC_PMODWIFI_0_WF_INTERRUPT_INTR
#endif

/************************************************************************/
/*                                                                      */
/*              SET THESE VALUES FOR YOUR NETWORK                       */
/*                                                                      */
/************************************************************************/

const char *szIPServer = "192.168.40.206"; // Server to connect to [ip LAN] [selectat ip in configurator LAN]
uint16_t portServer = 6789; // Port 44300

// Specify the SSID
const char *szSsid = "stefan1234";

// Select 1 for the security you want, or none for no security
#define USE_WPA2_PASSPHRASE
//#define USE_WPA2_KEY
//#define USE_WEP40
//#define USE_WEP104
//#define USE_WF_CONFIG_H

// Modify the security key to what you have.
#if defined(USE_WPA2_PASSPHRASE)

   const char *szPassPhrase = "test1234";
   #define WiFiConnectMacro() deIPcK.wfConnect(szSsid, szPassPhrase, &status)

#elif defined(USE_WPA2_KEY)

   WPA2KEY key = { 0x27, 0x2C, 0x89, 0xCC, 0xE9, 0x56, 0x31, 0x1E,
                   0x3B, 0xAD, 0x79, 0xF7, 0x1D, 0xC4, 0xB9, 0x05,
                   0x7A, 0x34, 0x4C, 0x3E, 0xB5, 0xFA, 0x38, 0xC2,
                   0x0F, 0x0A, 0xB0, 0x90, 0xDC, 0x62, 0xAD, 0x58 };
   #define WiFiConnectMacro() deIPcK.wfConnect(szSsid, key, &status)

#elif defined(USE_WEP40)

   const int iWEPKey = 0;
   WEP40KEY keySet = { 0xBE, 0xC9, 0x58, 0x06, 0x97,   // Key 0
                       0x00, 0x00, 0x00, 0x00, 0x00,   // Key 1
                       0x00, 0x00, 0x00, 0x00, 0x00,   // Key 2
                       0x00, 0x00, 0x00, 0x00, 0x00 }; // Key 3
   #define WiFiConnectMacro() deIPcK.wfConnect(szSsid, keySet, iWEPKey, &status)

#elif defined(USE_WEP104)

   const int iWEPKey = 0;
   WEP104KEY keySet = { 0x3E, 0xCD, 0x30, 0xB2, 0x55, 0x2D, 0x3C, 0x50, 0x52, 0x71, 0xE8, 0x83, 0x91,   // Key 0
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // Key 1
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // Key 2
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // Key 3
   #define WiFiConnectMacro() deIPcK.wfConnect(szSsid, keySet, iWEPKey, &status)

#elif defined(USE_WF_CONFIG_H)

   #define WiFiConnectMacro() deIPcK.wfConnect(0, &status)

#else // No security - OPEN

   #define WiFiConnectMacro() deIPcK.wfConnect(szSsid, &status)

#endif


typedef enum {
   NONE = 0,
   CONNECTING,
   CONNECTED,
   SERVERCONNECTED,
   WRITE,
   READ,
   CLOSE,
   NOACTION,
} STATE;

STATE state = NOACTION;

unsigned tStart = 0;
unsigned tWait = 5000;

TCPSocket tcpSocket;
byte rgbRead[1024];

// This is for Print.write to print
byte rgbWrite[] = {'*','W','r','o','t','e',' ','f','r','o','m',' ','p','r','i','n','t','.','w','r','i','t','e','*','\n'};
int cbWrite = sizeof(rgbWrite);

// This is for tcpSocket.writeStream to print
byte rgbWriteStream[] = {'*','W','r','o','t','e',' ','f','r','o','m',' ','t','c','p','C','l','i','e','n','t','.','w','r','i','t','e','S','t','r','e','a','m','*','\n'};
int cbWriteStream = sizeof(rgbWriteStream);




void Initialize() {
   setPmodWifiAddresses(
      XPAR_PMODWIFI_0_AXI_LITE_SPI_BASEADDR,
      XPAR_PMODWIFI_0_AXI_LITE_WFGPIO_BASEADDR,
      XPAR_PMODWIFI_0_AXI_LITE_WFCS_BASEADDR,
      XPAR_PMODWIFI_0_S_AXI_TIMER_BASEADDR
   );
   setPmodWifiIntVector(PMODWIFI_VEC_ID);

}


void RunCommand(char* command) {
   IPSTATUS status;
   int cbRead = 0;

   if(strcmp(command,"start") == 0)
	   {
	   xil_printf("WIFI started and ready for command!\r\n");
	   xil_printf("Commands:!\r\n");
	   }


      // Write out the strings
   else if(strcmp(command,"send") == 0)
            {
         if (tcpSocket.isEstablished()) {
            tcpSocket.writeStream(rgbWriteStream, cbWriteStream);

            xil_printf("Bytes Read Back:\r\n");
            state = READ;
            tStart = (unsigned) SYSGetMilliSecond();
         }
            }

      // Look for the echo back
   else if(strcmp(command,"read") == 0)
            {

         // See if we got anything to read
         if ((cbRead = tcpSocket.available()) > 0) {
            cbRead = cbRead < (int) sizeof(rgbRead) ? cbRead : sizeof(rgbRead);
            cbRead = tcpSocket.readStream(rgbRead, cbRead);
            rgbRead[cbRead] = 0; // Null Terminator
            xil_printf("%s\r\n", rgbRead);
         }

         // Give us some time to get everything echo'ed back
         else if ((((unsigned) SYSGetMilliSecond()) - tStart) > tWait) {
            xil_printf("\r\n");
            state = CLOSE;
         }
            }

      // Done, so close up the tcpSocket
   else if(strcmp(command,"close") == 0)
            {
         tcpSocket.close();
         xil_printf("Closing TcpClient, Done with sketch.\r\n");
         state = NOACTION;
            }
   else xil_printf("Unknown command!\r\n");
      DEIPcK::periodicTasks();
}

void Wifi_Connect()
{
	IPSTATUS status;
	if (WiFiConnectMacro()) {
	            xil_printf("WiFi connected\r\n");
	            deIPcK.begin();
	            state = CONNECTED;
	         } else if (IsIPStatusAnError(status)) {
	            xil_printf("Unable to connect, status: %d\r\n", status);
	            state = CONNECTING;
	         }
}

void Wifi_TCPConnect()
{
	if (deIPcK.tcpConnect(szIPServer, portServer, tcpSocket)) {
	            xil_printf("Connected to server.\r\n");
	            state = SERVERCONNECTED;
	         }
}

byte stringToByte(char * src){
    return byte(atoi(src));
}

void Wifi_SendServer(char* txt)
{
	if (tcpSocket.isEstablished())
		{
		byte to_send[1024];
		strncpy((char*)&to_send,txt,strlen(txt));
		tcpSocket.writeStream(to_send, strlen(txt));
		}

}

char * Wifi_ReadFromServer()
{
	int cbRead = 0;
	char * to_send = (char*)malloc(sizeof(char*) * 1024);
	if ((cbRead = tcpSocket.available()) > 0) {
	            cbRead = cbRead < (int) sizeof(rgbRead) ? cbRead : sizeof(rgbRead);
	            cbRead = tcpSocket.readStream(rgbRead, cbRead);
	            rgbRead[cbRead] = 0; // Null Terminator
	            sprintf(to_send,"%s",rgbRead);
	            return to_send;
	         }
	return NULL;
}

int RunWifi() {
   Xil_ICacheEnable();
   Xil_DCacheEnable();

   Initialize();
   return 0;
}


